from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler
)
import re
import pymysql
import hashlib
import logging
import time
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '7264575945:AAEb-20r_FrtVEVXK4aAIYnSCVjo-N3fedM'
WEBSITE_LINK = "https://web.tokalki-bar.com/"
ADMIN_CHAT_ID = 7909707902  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏

# Deep links
DEEP_LINKS = {
    'balance': 'balance',
    'recovery': 'recovery',
    'support': 'support'
}

DB_CONFIG = {
    'host': 'baza-do-user-20329937-0.k.db.ondigitalocean.com',
    'port': 25060,
    'user': 'baza',
    'password': 'AVNS_ItveeVzcRcSMRCxyQiz',
    'db': 'T',
    'charset': 'utf8mb4',
    'cursorclass': pymysql.cursors.DictCursor
}

CHANNELS = [
    {"name": "–¢–æ–∫–∞–ª–∫–∏.–ë–∞—Ä", "url": "https://t.me/+vgST8DXydacyNzc0"},
    {"name": "TOKALKI", "url": "https://t.me/+5P6aHiY51wUzMmFk"},
    {"name": "–ë–æ–¥–∏ –º–∞—Å—Å–∞–∂ –ê–ª–º–∞—Ç—ã üî•", "url": "https://t.me/+zpOwD3l5OY02ZmZi"},
    {"name": "–ú–∞—Å—Å–∞–∂–∏—Å—Ç–∫–∏ –ê–ª–º–∞—Ç—ã", "url": "https://t.me/+bQTshkatsbAzODM0"},
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è
PHONE_INPUT, NEW_PASSWORD, SUPPORT_MAIN_MENU, SUPPORT_INPUT, SUPPORT_ATTACHMENT, ASK_ANKETA, ASK_RECEIPT = range(7)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MAX_TICKETS_PER_HOUR = 3
PASSWORD_CHANGE_COOLDOWN = 3600  # 1 —á–∞—Å

# –ö—ç—à–∏
password_change_cache = {}

def format_phone(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    phone = re.sub(r'[^\d+]', '', phone)
    if phone.startswith('7') and len(phone) == 11:
        return f"+7 ({phone[1:4]}) {phone[4:7]} {phone[7:9]} {phone[9:11]}"
    elif phone.startswith('+7') and len(phone) == 12:
        return f"+7 ({phone[2:5]}) {phone[5:8]} {phone[8:10]} {phone[10:12]}"
    return phone

def hash_password(password):
    """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –≤ MD5"""
    return hashlib.md5(password.encode('utf-8')).hexdigest()

def check_user_in_db(phone):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ"""
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = "SELECT * FROM `b_user` WHERE `LOGIN` = %s"
            cursor.execute(sql, (phone,))
            return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        return False
    finally:
        if 'connection' in locals():
            connection.close()

def update_user_password(phone, new_password):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        hashed_password = hash_password(new_password)
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = "UPDATE `b_user` SET `PASSWORD` = %s WHERE `LOGIN` = %s"
            cursor.execute(sql, (hashed_password, phone))
            connection.commit()
            return cursor.rowcount > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False
    finally:
        if 'connection' in locals():
            connection.close()

def create_ticket(user_id, user_name, message):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = """
                INSERT INTO `support_tickets` 
                (`user_id`, `user_name`, `message`, `status`, `admin_message_id`) 
                VALUES (%s, %s, %s, 'open', NULL)
            """
            cursor.execute(sql, (user_id, user_name, message))
            connection.commit()
            return cursor.lastrowid
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        return None
    finally:
        if 'connection' in locals():
            connection.close()

def add_response(ticket_id, admin_id, message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é"""
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = """
                INSERT INTO `support_responses` 
                (`ticket_id`, `admin_id`, `message`) 
                VALUES (%s, %s, %s)
            """
            cursor.execute(sql, (ticket_id, admin_id, message))
            connection.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return False
    finally:
        if 'connection' in locals():
            connection.close()

def get_user_tickets(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = """
                SELECT t.*, r.message as response, r.created_at as response_date 
                FROM `support_tickets` t
                LEFT JOIN `support_responses` r ON t.id = r.ticket_id
                WHERE t.user_id = %s
                ORDER BY t.created_at DESC, r.created_at ASC
            """
            cursor.execute(sql, (user_id,))
            
            tickets = {}
            for row in cursor.fetchall():
                if row['id'] not in tickets:
                    tickets[row['id']] = {
                        'id': row['id'],
                        'message': row['message'],
                        'status': row['status'],
                        'created_at': row['created_at'],
                        'responses': []
                    }
                if row['response']:
                    tickets[row['id']]['responses'].append({
                        'message': row['response'],
                        'created_at': row['response_date']
                    })
            
            return list(tickets.values())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
        return []
    finally:
        if 'connection' in locals():
            connection.close()

def delete_ticket(ticket_id, user_id):
    """–£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            sql = "SELECT `admin_message_id` FROM `support_tickets` WHERE `id` = %s AND `user_id` = %s"
            cursor.execute(sql, (ticket_id, user_id))
            ticket = cursor.fetchone()
            
            if not ticket:
                return None
                
            admin_message_id = ticket['admin_message_id']
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
            sql = "DELETE FROM `support_responses` WHERE `ticket_id` = %s"
            cursor.execute(sql, (ticket_id,))
            
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
            sql = "DELETE FROM `support_tickets` WHERE `id` = %s AND `user_id` = %s"
            cursor.execute(sql, (ticket_id, user_id))
            
            connection.commit()
            return admin_message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        return None
    finally:
        if 'connection' in locals():
            connection.close()

def check_anketa_exists(anketa_number):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∫–µ—Ç—ã –≤ –±–∞–∑–µ"""
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = "SELECT * FROM `b_iblock_element` WHERE `id` = %s"
            cursor.execute(sql, (anketa_number,))
            return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–Ω–∫–µ—Ç—ã: {e}")
        return False
    finally:
        if 'connection' in locals():
            connection.close()

def count_recent_tickets(user_id):
    """–°—á–∏—Ç–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"""
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = """
                SELECT COUNT(*) as count 
                FROM `support_tickets` 
                WHERE `user_id` = %s AND `created_at` > NOW() - INTERVAL 1 HOUR
            """
            cursor.execute(sql, (user_id,))
            return cursor.fetchone()['count']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
        return 0
    finally:
        if 'connection' in locals():
            connection.close()

def save_admin_message_id(ticket_id, message_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = "UPDATE `support_tickets` SET `admin_message_id` = %s WHERE `id` = %s"
            cursor.execute(sql, (message_id, ticket_id))
            connection.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        if 'connection' in locals():
            connection.close()

def get_ticket_info(ticket_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = "SELECT * FROM `support_tickets` WHERE `id` = %s"
            cursor.execute(sql, (ticket_id,))
            return cursor.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ–±—Ä–∞—â–µ–Ω–∏–∏: {e}")
        return None
    finally:
        if 'connection' in locals():
            connection.close()

def get_last_ticket_time(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = """
                SELECT UNIX_TIMESTAMP(`created_at`) as timestamp 
                FROM `support_tickets` 
                WHERE `user_id` = %s 
                ORDER BY `created_at` DESC LIMIT 1
            """
            cursor.execute(sql, (user_id,))
            result = cursor.fetchone()
            return result['timestamp'] if result else 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        return 0
    finally:
        if 'connection' in locals():
            connection.close()

async def kanali(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(channel["name"], url=channel["url"])]
        for channel in CHANNELS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üì¢ –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã:", reply_markup=reply_markup)

async def link(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç"""
    await update.message.reply_text(
        f"üåê –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç:\n\n{WEBSITE_LINK}",
        disable_web_page_preview=True
    )
            
async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ deep links
    if context.args:
        deep_link = context.args[0].lower()
        
        if deep_link == DEEP_LINKS['balance']:
            return await balans(update, context)
        elif deep_link == DEEP_LINKS['recovery']:
            return await start_password_recovery(update, context)
        elif deep_link == DEEP_LINKS['support']:
            return await support_menu(update, context)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        ['–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'],
        ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
        ['–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'],
        ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

async def balans(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–£–∫–∞–∂–∏—Ç–µ <b>–Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã</b> –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):',
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return ASK_ANKETA

async def handle_anketa(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã"""
    if update.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ':
        return await cancel_payment(update, context)
    
    anketa_number = update.message.text

    if not re.match(r'^\d+$', anketa_number):
        await update.message.reply_text(
            '‚ùå –ù–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
            reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ']], resize_keyboard=True)
        )
        return ASK_ANKETA

    if check_anketa_exists(anketa_number):
        context.user_data['anketa_number'] = anketa_number
        await update.message.reply_text(
            '–ö–∞—Ä—Ç–∞ - <b>4400 4344 2442 4411</b> üí≥\n\n'
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 1.000 —Ç–≥.\n'
            '–ü–æ–ø–æ–ª–Ω—è–µ–º –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.\n\n'
            '<b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç.</b> üßæ',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ']], resize_keyboard=True)
        )
        return ASK_RECEIPT
    else:
        await update.message.reply_text(
            '‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å –∞–Ω–∫–µ—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ']], resize_keyboard=True)
        )
        return ASK_ANKETA

async def handle_receipt(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ"""
    if update.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ':
        return await cancel_payment(update, context)
    
    if not (update.message.document or update.message.photo):
        await update.message.reply_text(
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–ø–ª–∞—Ç—ã –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞.',
            reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ']], resize_keyboard=True)
        )
        return ASK_RECEIPT

    anketa_number = context.user_data['anketa_number']
    user = update.message.from_user
    user_info = f"–ò–º—è: {user.first_name}\nUsername: @{user.username}" if user.username else f"–ò–º—è: {user.first_name}"

    if update.message.document:
        file_id = update.message.document.file_id
        await context.bot.send_document(
            chat_id=ADMIN_CHAT_ID,
            document=file_id,
            caption=f"–ß–µ–∫ –¥–ª—è –ê–Ω–∫–µ—Ç—ã: {anketa_number}\n–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_info}"
        )
    elif update.message.photo:
        file_id = update.message.photo[-1].file_id
        await context.bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=file_id,
            caption=f"–ß–µ–∫ –¥–ª—è –ê–Ω–∫–µ—Ç—ã: {anketa_number}\n–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_info}"
        )

    await update.message.reply_text(
        '–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç. ‚úÖ',
        reply_markup=ReplyKeyboardMarkup([
            ['–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'],
            ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
            ['–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'],
            ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
        ], resize_keyboard=True)
    )
    return ConversationHandler.END

async def cancel_payment(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    await update.message.reply_text(
        '‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        reply_markup=ReplyKeyboardMarkup([
            ['–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'],
            ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
            ['–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'],
            ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
        ], resize_keyboard=True)
    )
    return ConversationHandler.END

async def start_password_recovery(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    last_change = password_change_cache.get(user_id)
    if last_change and time.time() - last_change < PASSWORD_CHANGE_COOLDOWN:
        remaining = int((last_change + PASSWORD_CHANGE_COOLDOWN - time.time()) / 60)
        await update.message.reply_text(
            f"‚ö†Ô∏è –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –≤–æ–∑–º–æ–∂–Ω–∞ —Ä–∞–∑ –≤ —á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining} –º–∏–Ω—É—Ç.",
            reply_markup=ReplyKeyboardMarkup([
                ['–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'],
                ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
                ['–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'],
                ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
            ], resize_keyboard=True)
        )
        return ConversationHandler.END
    
    keyboard = [
        [KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
        ["–û—Ç–º–µ–Ω–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üì± –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º:",
        reply_markup=reply_markup
    )
    return PHONE_INPUT

async def process_phone_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if update.message.text and update.message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    
    if not update.message.contact:
        await update.message.reply_text(
            "‚ùå –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
                ["–û—Ç–º–µ–Ω–∞"]
            ], resize_keyboard=True, one_time_keyboard=True)
        )
        return PHONE_INPUT
    
    phone_number = update.message.contact.phone_number
    formatted_phone = format_phone(phone_number)
    
    if not check_user_in_db(formatted_phone):
        await update.message.reply_text(
            f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä: <b>{formatted_phone}</b> –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ –¢–æ–∫–∞–ª–∫–∏ –ë–ê–†.",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup([
                ['–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'],
                ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
                ['–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'],
                ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
            ], resize_keyboard=True)
        )
        return ConversationHandler.END
    
    context.user_data['phone'] = formatted_phone
    
    await update.message.reply_text(
        f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä: <b>{formatted_phone}</b> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞):",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return NEW_PASSWORD

async def process_new_password(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"""
    if update.message.text and update.message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    
    new_password = update.message.text.strip()
    
    if len(new_password) < 4:
        await update.message.reply_text(
            "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return NEW_PASSWORD
    
    phone = context.user_data['phone']
    user_id = update.effective_user.id
    
    if update_user_password(phone, new_password):
        password_change_cache[user_id] = time.time()
        
        await update.message.reply_text(
            "‚úÖ <b>–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"<b>–õ–æ–≥–∏–Ω</b>: <code>{phone}</code>\n"
            f"<b>–ü–∞—Ä–æ–ª—å</b>: <code>{new_password}</code>\n\n"
            f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {WEBSITE_LINK}cabinet/",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=ReplyKeyboardMarkup([
                ['–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'],
                ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
                ['–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'],
                ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
            ], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ —É–∫–∞–∑–∞–ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardMarkup([
                ['–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'],
                ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
                ['–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'],
                ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
            ], resize_keyboard=True)
        )
    
    return ConversationHandler.END

async def support_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    context.user_data.pop('support_message', None)
    
    keyboard = [
        ['–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ'],
        ['–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è'],
        ['–ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
    if update.message.text == '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞' and context.user_data.get('in_support'):
        return SUPPORT_MAIN_MENU
    
    context.user_data['in_support'] = True
    await update.message.reply_text(
        'üì© –ú–µ–Ω—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:',
        reply_markup=reply_markup
    )
    return SUPPORT_MAIN_MENU

async def handle_back_from_support(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä
    context.user_data.pop('in_support', None)
    await update.message.reply_text(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=ReplyKeyboardMarkup([
            ['–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'],
            ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
            ['–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'],
            ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
        ], resize_keyboard=True)
    )
    return ConversationHandler.END

async def start_support(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    recent_tickets = count_recent_tickets(user_id)
    
    if recent_tickets >= MAX_TICKETS_PER_HOUR:
        last_ticket_time = get_last_ticket_time(user_id)
        if last_ticket_time:
            remaining_time = 60 - int((time.time() - last_ticket_time) // 60)
            await update.message.reply_text(
                f"‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —á–∞—Å. "
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} –º–∏–Ω—É—Ç.",
                reply_markup=ReplyKeyboardMarkup([
                    ['–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è'],
                    ['–ù–∞–∑–∞–¥']
                ], resize_keyboard=True)
            )
        else:
            await update.message.reply_text(
                "‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —á–∞—Å.",
                reply_markup=ReplyKeyboardMarkup([
                    ['–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è'],
                    ['–ù–∞–∑–∞–¥']
                ], resize_keyboard=True)
            )
        return SUPPORT_MAIN_MENU
    
    await update.message.reply_text(
        "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:",
        reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
    )
    return SUPPORT_INPUT

async def process_support_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if update.message.text == '–û—Ç–º–µ–Ω–∞':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∞ –Ω–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return await support_menu(update, context)
    
    context.user_data['support_message'] = update.message.text
    await update.message.reply_text(
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=ReplyKeyboardMarkup([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']], resize_keyboard=True)
    )
    return SUPPORT_ATTACHMENT

async def process_support_attachment(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user = update.effective_user
    attachment = None
    
    if update.message.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        if update.message.photo:
            attachment = {'type': 'photo', 'file_id': update.message.photo[-1].file_id}
        elif update.message.document:
            attachment = {'type': 'document', 'file_id': update.message.document.file_id}
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                reply_markup=ReplyKeyboardMarkup([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']], resize_keyboard=True)
            )
            return SUPPORT_ATTACHMENT
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
    ticket_id = create_ticket(user.id, user.full_name, context.user_data['support_message'])
    
    if not ticket_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
        return await start(update, context)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        admin_msg = await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üì© –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}\n\n"
                 f"üë§ {user.full_name} (@{user.username or '–Ω–µ—Ç'})\n"
                 f"üÜî {user.id}\n\n"
                 f"‚úâÔ∏è {context.user_data['support_message']}",
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        save_admin_message_id(ticket_id, admin_msg.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if attachment:
            if attachment['type'] == 'photo':
                await context.bot.send_photo(
                    chat_id=ADMIN_CHAT_ID,
                    photo=attachment['file_id'],
                    caption=f"üìé –í–ª–æ–∂–µ–Ω–∏–µ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é #{ticket_id}",
                    reply_to_message_id=admin_msg.message_id
                )
            else:
                await context.bot.send_document(
                    chat_id=ADMIN_CHAT_ID,
                    document=attachment['file_id'],
                    caption=f"üìé –í–ª–æ–∂–µ–Ω–∏–µ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é #{ticket_id}",
                    reply_to_message_id=admin_msg.message_id
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    
    await update.message.reply_text(
        f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} —Å–æ–∑–¥–∞–Ω–æ! –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        reply_markup=ReplyKeyboardMarkup([
            ['–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'],
            ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
            ['–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'],
            ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
        ], resize_keyboard=True)
    )
    context.user_data.pop('in_support', None)
    return ConversationHandler.END

async def show_my_tickets(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    tickets = get_user_tickets(user.id)
    
    if not tickets:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=ReplyKeyboardMarkup([
                ['–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ'],
                ['–ù–∞–∑–∞–¥']
            ], resize_keyboard=True)
        )
        return SUPPORT_MAIN_MENU
    
    for ticket in tickets:
        status_text = {
            'open': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞',
            'answered': '‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ',
            'closed': '‚ùå –ó–∞–∫—Ä—ã—Ç–æ'
        }.get(ticket['status'], ticket['status'])
        
        message_text = (
            f"üÜî –û–±—Ä–∞—â–µ–Ω–∏–µ <b>#{ticket['id']}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {ticket['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            f"‚úçÔ∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{ticket['message']}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
        if ticket.get('responses'):
            for response in ticket['responses']:
                message_text += (
                    f"\n\nüì© <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b> ({response['created_at'].strftime('%d.%m.%Y %H:%M')}):\n"
                    f"{response['message']}"
                )
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_ticket_{ticket['id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    keyboard = [
        ['–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ'],
        ['–ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return SUPPORT_MAIN_MENU

async def delete_ticket_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if not query.data.startswith('delete_ticket_'):
        return
    
    ticket_id = int(query.data.split('_')[-1])
    user_id = query.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    admin_message_id = delete_ticket(ticket_id, user_id)
    
    if admin_message_id is not None:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
        try:
            await context.bot.delete_message(
                chat_id=ADMIN_CHAT_ID,
                message_id=admin_message_id
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞: {e}")
        
        await query.edit_message_text(f"‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} —É–¥–∞–ª–µ–Ω–æ")
    else:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
    keyboard = [
        ['–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ'],
        ['–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è'],
        ['–ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(
        chat_id=user_id,
        text="üì© –ú–µ–Ω—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
        reply_markup=reply_markup
    )
    return SUPPORT_MAIN_MENU

async def admin_reply_to_ticket(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    replied_msg = update.message.reply_to_message.text
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è
    ticket_id = None
    try:
        match = re.search(r'#(\d+)', replied_msg)
        if match:
            ticket_id = int(match.group(1))
    except (AttributeError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–º–µ—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è.",
            reply_to_message_id=update.message.message_id
        )
        return
    
    if not ticket_id:
        await update.message.reply_text(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.",
            reply_to_message_id=update.message.message_id
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É
    admin = update.effective_user
    success = add_response(
        ticket_id=ticket_id,
        admin_id=admin.id,
        message=update.message.text
    )
    
    if not success:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
            reply_to_message_id=update.message.message_id
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
    ticket = get_ticket_info(ticket_id)
    if not ticket:
        await update.message.reply_text(
            "‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.",
            reply_to_message_id=update.message.message_id
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è
    try:
        connection = pymysql.connect(**DB_CONFIG)
        with connection.cursor() as cursor:
            sql = "UPDATE `support_tickets` SET `status` = 'answered' WHERE `id` = %s"
            cursor.execute(sql, (ticket_id,))
            connection.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=ticket['user_id'],
            text=f"üì© <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}</b>\n\n"
                 f"üí¨ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{ticket['message']}\n\n"
                 f"üì£ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{update.message.text}\n\n"
                 f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.",
            parse_mode='HTML'
        )
        
        await update.message.reply_text(
            f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            reply_to_message_id=update.message.message_id
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.",
            reply_to_message_id=update.message.message_id
        )

async def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
    await update.message.reply_text(
        "‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardMarkup([
            ['–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç'],
            ['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
            ['–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'],
            ['–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
        ], resize_keyboard=True)
    )
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("link", link))
    app.add_handler(CommandHandler("channels", kanali))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.Regex('^–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç$'), link))
    app.add_handler(MessageHandler(filters.Regex('^–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã$'), kanali))
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    password_recovery_handler = ConversationHandler(
        entry_points=[
            CommandHandler("recover", start_password_recovery),
            MessageHandler(filters.Regex('^–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å$'), start_password_recovery)
        ],
        states={
            PHONE_INPUT: [MessageHandler(filters.CONTACT | filters.TEXT & ~filters.COMMAND, process_phone_input)],
            NEW_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_new_password)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    app.add_handler(password_recovery_handler)
    
    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    balance_handler = ConversationHandler(
        entry_points=[
            CommandHandler("balans", balans),
            MessageHandler(filters.Regex('^–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å$'), balans)
        ],
        states={
            ASK_ANKETA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_anketa),
                MessageHandler(filters.COMMAND, cancel_payment)
            ],
            ASK_RECEIPT: [
                MessageHandler(filters.ALL & ~filters.COMMAND, handle_receipt),
                MessageHandler(filters.COMMAND, cancel_payment)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_payment)]
    )
    app.add_handler(balance_handler)
    
    # –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
    support_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞$'), support_menu),
        ],
        states={
            SUPPORT_MAIN_MENU: [
                MessageHandler(filters.Regex('^–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ$'), start_support),
                MessageHandler(filters.Regex('^–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è$'), show_my_tickets),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), handle_back_from_support)
            ],
            SUPPORT_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_support_message)
            ],
            SUPPORT_ATTACHMENT: [
                MessageHandler(filters.PHOTO | filters.Document.ALL, process_support_attachment),
                MessageHandler(filters.Regex('^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$'), process_support_attachment)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    app.add_handler(support_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π
    app.add_handler(CallbackQueryHandler(delete_ticket_handler, pattern='^delete_ticket_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞
    app.add_handler(MessageHandler(
        filters.Chat(ADMIN_CHAT_ID) & filters.REPLY,
        admin_reply_to_ticket
    ))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == '__main__':
    main()